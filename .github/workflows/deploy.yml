# .github/workflows/deploy.yml
# Versão 109 - Final e Simplificada

name: CI/CD - Construir e Implementar

on:
  push:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ghcr.io/${{ github.repository_owner }}/setormusicalms-backend
  IMAGE_NAME_FRONTEND: ghcr.io/${{ github.repository_owner }}/setormusicalms-frontend

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
      - name: Login no GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build e Push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./fastapi_backend
          push: true
          tags: ${{ env.IMAGE_NAME_BACKEND }}:latest
      - name: Build e Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          dockerfile: Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME_FRONTEND }}:latest

  deploy_and_validate:
    needs: build_and_push
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Deploy e Validação na VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          password: ${{ secrets.VPS_SSH_PASS }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            set -e
            PROJECT_DIR="${{ secrets.PROJECT_PATH_ON_VPS }}"

            echo ">>> [1/6] Acessando o diretório do projeto: $PROJECT_DIR"
            cd $PROJECT_DIR
            
            echo ">>> [2/6] Autenticando no GHCR..."
            mkdir -p ~/.docker
            echo '${{ secrets.DOCKER_CONFIG_JSON }}' > ~/.docker/config.json

            echo ">>> [3/6] Parando e removendo serviços antigos..."
            docker compose down --remove-orphans
            
            echo ">>> [4/6] Baixando as imagens mais recentes..."
            docker compose pull

            echo ">>> [5/6] Subindo os novos contêineres..."
            docker compose up -d

            echo ">>> [6/6] Aguardando 30s para a inicialização completa..."
            sleep 30

            echo ">>> Verificando saúde da aplicação em produção..."
            if curl -sSf --retry 3 http://setormusicalms.art.br/api/health | grep -q '"status":"healthy"'; then
              echo "✅ Aplicação online e saudável!"
              docker compose exec backend python /app/init_admin.py
              docker image prune -af
            else
              echo "❌ ERRO: A API não respondeu no domínio."
              echo "--- LOGS DO BACKEND ---"
              docker compose logs backend --tail=100
              exit 1
            fi
