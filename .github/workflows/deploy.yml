# .github/workflows/deploy.yml
# Versão 40 18/07/2025 10:58

name: CI/CD - Testar, Construir e Implementar

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: docker compose up -d --build
      - name: Aguardar, Verificar Saúde e Inicializar DB
        run: |
          echo "A aguardar que a API esteja pronta..."
          timeout=60
          while ! curl -sSf http://localhost:8000/api/health; do
            timeout=$((timeout - 5))
            if [ $timeout -le 0 ]; then
              echo "A API não ficou pronta em 60 segundos."
              docker compose logs backend
              exit 1
            fi
            sleep 5
          done
          echo "✅ API está pronta e a responder!"
          # CORREÇÃO: O caminho para o script dentro do contentor é /app/init_admin.py
          docker compose exec backend python /app/init_admin.py
      - name: Instalar dependências e Executar Testes
        run: |
          pip install -r fastapi_backend/requirements.txt
          playwright install
          pytest fastapi_backend/
      - name: Parar os serviços após os testes
        if: always()
        run: docker compose down

  build_and_push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Login no GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build e Push da imagem do Backend
        uses: docker/build-push-action@v5
        with:
          context: ./fastapi_backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/setormusicalms-backend:latest
      - name: Build e Push da imagem do Frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          dockerfile: Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/setormusicalms-frontend:latest

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    environment: prod
    env:
      PROJECT_PATH_ON_VPS: /home/${{ secrets.VPS_SSH_USER }}/setormusical/setormusicalms
    steps:
      - name: Deploy na VPS via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          password: ${{ secrets.VPS_SSH_PASS }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            set -e
            echo ">> Acedendo ao diretório do projeto: ${{ env.PROJECT_PATH_ON_VPS }}"
            cd ${{ env.PROJECT_PATH_ON_VPS }}
            
            echo ">> Efetuando login no GitHub Container Registry..."
            echo ${{ secrets.GIT_PAT }} | sudo docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            
            echo ">> Puxando as imagens mais recentes..."
            sudo docker compose pull
            
            echo ">> Reiniciando os serviços..."
            sudo docker compose up -d
            
            echo ">> Aguardando os contentores estabilizarem..."
            sleep 10
            
            echo ">> Inicializando o banco de dados e o admin..."
            # CORREÇÃO: O caminho para o script dentro do contentor é /app/init_admin.py
            sudo docker compose exec backend python /app/init_admin.py
            
            echo ">> Limpando imagens Docker antigas..."
            sudo docker image prune -af
            
            echo ">> ✅ Deploy finalizado com sucesso!"
