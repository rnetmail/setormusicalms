# .github/workflows/deploy.yml
# Vers√£o 103 - Final com Deploy por Imagem e Valida√ß√£o em Produ√ß√£o

name: CI/CD - Testar, Construir, Implementar e Validar

on:
  push:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ghcr.io/${{ github.repository_owner }}/setormusicalms-backend
  IMAGE_NAME_FRONTEND: ghcr.io/${{ github.repository_owner }}/setormusicalms-frontend

jobs:
  # 1. ETAPA DE TESTES
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4
      - name: Subir servi√ßos com Docker Compose
        run: docker compose up -d --build
      - name: Aguardar e Verificar sa√∫de da API
        run: |
          echo "‚è≥ Aguardando sa√∫de da API em localhost..."
          timeout=90
          until curl -sSf http://localhost:8000/api/health; do
            timeout=$((timeout - 5))
            if [ $timeout -le 0 ]; then
              echo "‚ùå A API n√£o ficou pronta em 90s"
              docker compose logs backend
              exit 1
            fi
            sleep 5
          done
          echo "‚úÖ API saud√°vel!"
          docker compose exec backend python /app/init_admin.py
      - name: Instalar depend√™ncias e Executar Testes
        run: |
          pip install -r fastapi_backend/requirements.txt
          playwright install
          pytest fastapi_backend/
      - name: Encerrar containers ap√≥s testes
        if: always()
        run: docker compose down

  # 2. ETAPA DE BUILD E PUSH DAS IMAGENS
  build_and_push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4
      - name: Login no GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build e Push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./fastapi_backend
          push: true
          tags: ${{ env.IMAGE_NAME_BACKEND }}:latest
      - name: Build e Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          dockerfile: Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME_FRONTEND }}:latest

  # 3. ETAPA DE DEPLOY NA VPS
  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Deploy via SSH na VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          password: ${{ secrets.VPS_SSH_PASS }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            set -e
            PROJECT_DIR="${{ secrets.PROJECT_PATH_ON_VPS }}"

            echo ">>> Acessando o diret√≥rio do projeto: $PROJECT_DIR"
            cd $PROJECT_DIR
            
            echo ">>> Configurando autentica√ß√£o do Docker..."
            mkdir -p ~/.docker
            echo '${{ secrets.DOCKER_CONFIG_JSON }}' > ~/.docker/config.json

            echo ">>> Parando servi√ßos antigos..."
            docker compose down --remove-orphans
            
            echo ">>> Baixando as imagens mais recentes..."
            docker compose pull

            echo ">>> Subindo novos cont√™ineres com recria√ß√£o for√ßada..."
            docker compose up -d --force-recreate
            
            echo ">>> Limpando imagens n√£o utilizadas..."
            docker image prune -af
            
            echo "‚úÖ Deploy finalizado com sucesso!"

  # 4. ETAPA DE VALIDA√á√ÉO EM PRODU√á√ÉO
  validate:
    needs: deploy
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Aguardar estabiliza√ß√£o dos servi√ßos
        run: sleep 30
      - name: Validar endpoints da aplica√ß√£o
        run: |
          echo ">>> Validando Frontend em http://setormusicalms.art.br"
          curl -sSf --retry 3 http://setormusicalms.art.br/ | grep -q "<title>Setor Musical Mokiti Okada MS</title>"
          echo "‚úÖ Frontend est√° online."

          echo ">>> Validando Health Check da API em http://setormusicalms.art.br/api/health"
          curl -sSf --retry 3 http://setormusicalms.art.br/api/health | grep -q '"status":"healthy"'
          echo "‚úÖ API Health Check est√° online."

          echo ">>> Validando endpoints p√∫blicos da API..."
          curl -sSf --retry 3 "http://setormusicalms.art.br/api/repertorio/?type_filter=Coral"
          curl -sSf --retry 3 "http://setormusicalms.art.br/api/agenda/?group_filter=Orquestra"
          curl -sSf --retry 3 "http://setormusicalms.art.br/api/recados/?group_filter=Coral"
          echo "‚úÖ Endpoints p√∫blicos da API est√£o respondendo."
          
          echo "üöÄ Valida√ß√£o em produ√ß√£o conclu√≠da com sucesso!"
