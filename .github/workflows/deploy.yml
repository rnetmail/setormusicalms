# Versão Final - Completa, Funcional e Segura
# Alinhada com os segredos do ambiente e práticas modernas de CI/CD.

name: CI/CD - Testar, Construir, Implementar e Validar

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Padroniza o registro e os nomes das imagens para o GitHub Container Registry (GHCR)
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ghcr.io/${{ github.repository_owner }}/setormusicalms-backend
  IMAGE_NAME_FRONTEND: ghcr.io/${{ github.repository_owner }}/setormusicalms-frontend

jobs:
  test:
    name: 🧪 Testar Aplicação
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Iniciar serviços com Docker Compose
        run: docker compose up -d --build --remove-orphans

      - name: Aguardar e validar saúde da API
        run: |
          echo "⏳ Aguardando backend ficar saudável..."
          # O loop espera até 90 segundos pelo status '(healthy)' do contêiner
          for i in {1..10}; do
            if docker compose ps | grep 'setormusicalms-backend' | grep -q '(healthy)'; then
              echo "✅ Backend está saudável!"
              docker compose exec -T backend python /app/init_admin.py || echo "⚠️ Falha na inicialização do admin, continuando..."
              exit 0
            fi
            sleep 15
          done
          echo "❌ ERRO: Backend não ficou saudável em 90 segundos."
          echo "--- Logs do Backend ---"
          docker compose logs backend
          exit 1

      - name: Encerrar containers após testes
        if: always()
        run: docker compose down

  build_and_push:
    name: 🏗️ Construir e Publicar Imagens
    needs: test
    runs-on: ubuntu-latest
    # Só executa em push na branch main para evitar publicações desnecessárias
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      packages: write # Permissão para publicar pacotes (imagens Docker) no GHCR
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Login no GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # Token automático fornecido pelo GitHub Actions

      - name: Build e Push da Imagem do Backend
        uses: docker/build-push-action@v5
        with:
          context: . # CORRIGIDO: O Dockerfile do backend está na raiz
          push: true
          tags: ${{ env.IMAGE_NAME_BACKEND }}:latest

      - name: Build e Push da Imagem do Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.IMAGE_NAME_FRONTEND }}:latest

  deploy_and_validate:
    name: 🚀 Implementar e Validar na VPS
    needs: build_and_push
    runs-on: ubuntu-latest
    environment: prod # Usa os segredos do ambiente 'prod'
    steps:
      - name: Deploy na VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          script: |
            set -e # Encerra o script imediatamente se qualquer comando falhar

            echo ">>> [1/6] Acessando o diretório do projeto..."
            cd ${{ secrets.PROJECT_PATH_ON_VPS }}

            echo ">>> [2/6] Atualizando o código-fonte da branch 'main'..."
            git fetch origin
            git reset --hard origin/main

            echo ">>> [3/6] Autenticando no GHCR para baixar imagens..."
            # Usa o segredo DOCKER_CONFIG_JSON para autenticação
            mkdir -p ~/.docker
            echo '${{ secrets.DOCKER_CONFIG_JSON }}' > ~/.docker/config.json
            chmod 600 ~/.docker/config.json

            echo ">>> [4/6] Parando containers antigos e subindo os novos..."
            # O 'pull' garante que as imagens mais recentes sejam usadas
            docker compose pull
            docker compose up -d --force-recreate --remove-orphans

            echo ">>> [5/6] Aguardando 20s para a aplicação estabilizar..."
            sleep 30

            echo ">>> [6/6] Verificando status e limpando imagens antigas..."
            docker compose ps
            docker image prune -af
            
            echo "✅ Deploy concluído com sucesso!"
