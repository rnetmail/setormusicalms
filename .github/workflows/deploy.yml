# Deploy para VPS otimizado para Fast API
name: CI/CD - Build, Test, and Deploy

on:
  push:
    branches:
      - main

env:
  # Define o registro e os nomes das imagens para fácil reutilização
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ghcr.io/${{ github.repository_owner }}/setormusicalms-backend
  IMAGE_NAME_FRONTEND: ghcr.io/${{ github.repository_owner }}/setormusicalms-frontend
  PROJECT_PATH_ON_VPS: /home/${{ secrets.VPS_SSH_USER }}/setormusicalms

jobs:
  # JOB 1: Garante a qualidade do código com linting e testes
  lint_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Instalar dependências e linter
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt ruff

      - name: Verificar código com o Linter (Ruff)
        run: ruff check backend/

      - name: Rodar testes com Pytest
        working-directory: ./backend
        run: pytest

  # JOB 2: Constrói e publica as imagens Docker no GitHub Container Registry
  build_and_push:
    needs: lint_and_test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Permissão para publicar pacotes (imagens Docker)
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Login no GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # Token automático do GitHub

      - name: Build e Push da imagem do Backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.IMAGE_NAME_BACKEND }}:latest

      - name: Build e Push da imagem do Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.IMAGE_NAME_FRONTEND }}:latest

  # JOB 3: Faz o deploy das novas imagens na VPS
  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código (para ter o docker-compose.yml)
        uses: actions/checkout@v4

      - name: Deploy na VPS via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          password: ${{ secrets.VPS_SSH_PASS }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            cd ${{ env.PROJECT_PATH_ON_VPS }}
            echo ">> Criando arquivo .env"
            echo "ADMIN_PASS=${{ secrets.ADMIN_PASS }}" > .env
            echo "USER_ADMIN=${{ secrets.USER_ADMIN }}" >> .env
            echo "IMAGE_NAME_BACKEND=${{ env.IMAGE_NAME_BACKEND }}:latest" >> .env
            echo "IMAGE_NAME_FRONTEND=${{ env.IMAGE_NAME_FRONTEND }}:latest" >> .env

            echo ">> Logando no GitHub Container Registry na VPS"
            echo "${{ secrets.GIT_PAT }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

            echo ">> Baixando as imagens mais recentes"
            docker-compose pull

            echo ">> Reiniciando os serviços"
            docker-compose up -d

            echo ">> Limpando imagens Docker obsoletos"
            docker image prune -af

            echo ">> Limpando networks Docker obsoletos"
            docker network prune -af

            echo ">> Limpando volumes Docker obsoletos"
            docker volume prune -af
            
            echo ">> Deploy finalizado!"


