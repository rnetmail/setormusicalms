# .github/workflows/deploy.yml
# Vers√£o 123  -  Final, Completa e Funcional

name: CI/CD - Testar, Construir, Implementar e Validar

on:
  push:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ghcr.io/${{ github.repository_owner }}/setormusicalms-backend
  IMAGE_NAME_FRONTEND: ghcr.io/${{ github.repository_owner }}/setormusicalms-frontend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: 1. Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: 2. Iniciar servi√ßos com Docker Compose
        run: docker compose up -d --build

      - name: 3. Executar testes dentro do cont√™iner
        run: |
          # Espera a API ficar saud√°vel antes de rodar os testes
          echo "‚è≥ Aguardando sa√∫de da API..."
          timeout=90
          # CORRE√á√ÉO: Executa o curl de DENTRO do cont√™iner para garantir a conex√£o
          until docker compose exec -T backend curl -sSf http://localhost:8000/api/health; do
            timeout=$((timeout - 5))
            if [ $timeout -le 0 ]; then
              echo "‚ùå A API n√£o ficou pronta em 90s"
              docker compose logs backend
              exit 1
            fi
            sleep 5
          done
          echo "‚úÖ API saud√°vel!"

          # Inicializa admin e testa endpoint b√°sico
          echo "üöÄ Inicializando admin e testando endpoint..."
          docker compose exec -T backend python /app/init_admin.py
          
          # Teste simples de sa√∫de da API
          if docker compose exec -T backend curl -sSf http://localhost:8000/api/health | grep -q '"status":"healthy"'; then
            echo "‚úÖ Teste b√°sico passou - API est√° respondendo corretamente!"
          else
            echo "‚ùå Teste falhou - API n√£o est√° respondendo corretamente"
            exit 1
          fi

      - name: 4. Encerrar containers ap√≥s testes
        if: always()
        run: docker compose down

  build_and_push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4
      - name: Login no GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build e Push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./fastapi_backend
          push: true
          tags: ${{ env.IMAGE_NAME_BACKEND }}:latest
      - name: Build e Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          dockerfile: Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME_FRONTEND }}:latest

  deploy_and_validate:
    needs: build_and_push
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Deploy e Valida√ß√£o na VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          password: ${{ secrets.VPS_SSH_PASS }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            set -e
            PROJECT_DIR="${{ secrets.PROJECT_PATH_ON_VPS }}"

            echo ">>> [1/7] Acessando o diret√≥rio do projeto: $PROJECT_DIR"
            cd $PROJECT_DIR

            # ==================================================================
            # ATUALIZA O C√ìDIGO-FONTE NA VPS.
            # ==================================================================
            echo ">>> [2/7] Atualizando o c√≥digo-fonte com git..."
            # Comando mais robusto para garantir que o repo local fique
            # id√™ntico ao remoto, descartando quaisquer altera√ß√µes locais.
            git fetch origin
            git reset --hard origin/main
            
            echo ">>> [3/7] Autenticando no GHCR..."
            mkdir -p ~/.docker
            echo '${{ secrets.DOCKER_CONFIG_JSON }}' > ~/.docker/config.json

            echo ">>> [4/7] Parando e removendo servi√ßos antigos..."
            # docker compose down --remove-orphans --volumes
            docker compose down --remove-orphans  
            
            echo ">>> [5/7] Baixando as imagens mais recentes..."
            docker compose pull

            echo ">>> [6/7] Subindo os novos cont√™ineres..."
            # docker compose up -d
            docker compose up -d --force-recreate

            echo ">>> [7/7] Aguardando 30s para a inicializa√ß√£o completa..."
            sleep 30

            echo ">>> Verificando sa√∫de da aplica√ß√£o em produ√ß√£o..."
            if curl -sSf --retry 3 http://setormusicalms.art.br/api/health | grep -q '"status":"healthy"'; then
              echo "‚úÖ Aplica√ß√£o online e saud√°vel!"
              docker compose exec backend python /app/init_admin.py
              docker image prune -af
            else
              echo "‚ùå ERRO: A API n√£o respondeu no dom√≠nio."
              echo "--- LOGS DO BACKEND ---"
              docker compose logs backend --tail=100
              exit 1
            fi
