# .github/workflows/deploy.yml
# Versão 97 - Final e Simplificada

name: CI/CD - Construir e Implementar

on:
  push:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ghcr.io/${{ github.repository_owner }}/setormusicalms-backend
  IMAGE_NAME_FRONTEND: ghcr.io/${{ github.repository_owner }}/setormusicalms-frontend

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: 1. Checkout do código
        uses: actions/checkout@v4

      - name: 2. Login no GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 3. Build e Push da imagem do Backend
        uses: docker/build-push-action@v5
        with:
          context: ./fastapi_backend
          push: true
          tags: ${{ env.IMAGE_NAME_BACKEND }}:latest

      - name: 4. Build e Push da imagem do Frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          dockerfile: Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME_FRONTEND }}:latest

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Deploy na VPS via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          password: ${{ secrets.VPS_SSH_PASS }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            set -e
            PROJECT_DIR="${{ secrets.PROJECT_PATH_ON_VPS }}"

            echo ">>> [1/6] Acedendo ao diretório do projeto: $PROJECT_DIR"
            cd $PROJECT_DIR
            
            echo ">>> [2/6] Configurando autenticação do Docker..."
            mkdir -p ~/.docker
            echo '${{ secrets.DOCKER_CONFIG_JSON }}' > ~/.docker/config.json
            
            echo ">>> [3/6] Parando serviços antigos..."
            sudo docker compose down --remove-orphans
            
            echo ">>> [4/6] Puxando as imagens mais recentes..."
            sudo docker compose pull
            
            echo ">>> [5/6] Subindo os novos contêineres..."
            sudo docker compose up -d
            
            # Aguarda um momento para que o backend tente iniciar
            echo ">>> [6/6] Aguardando 10s para capturar logs de inicialização..."
            sleep 10
            
            echo "✅ Sequência de deploy enviada para a VPS."
            
  validate:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Validar saúde da aplicação na VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          password: ${{ secrets.VPS_SSH_PASS }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            set -e
            PROJECT_DIR="${{ secrets.PROJECT_PATH_ON_VPS }}"
            cd $PROJECT_DIR

            echo ">>> Verificando status dos contêineres..."
            sudo docker compose ps

            echo ">>> Exibindo logs do backend para diagnóstico..."
            sudo docker compose logs backend --tail=100
            
            echo ">>> Testando o health check da API..."
            if curl -sSf http://setormusicalms.art.br:8000/api/health | grep -q '{"status":"healthy"}'; then
              echo "✅ Health check da API bem-sucedido!"
            else
              echo "❌ ERRO: Health check da API falhou."
              exit 1
            fi
            
            echo ">>> ✅ Validação na VPS concluída com sucesso!"
