# /.github/workflows/deploy.yml
# v2.0 - 2025-08-07 12:10:00 - Corrige execu√ß√£o do init_admin.py
# v2.1 - 2025-08-07 - Padroniza para 'docker compose' e ajusta contextos/endpoints.

name: Deploy to VPS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout do c√≥digo
      uses: actions/checkout@v3

    - name: Iniciar servi√ßos com Docker Compose
      run: |
        # Usa o docker-compose.yml corrigido para iniciar os servi√ßos
        docker compose up -d --build --remove-orphans
        
    - name: Executar testes de integra√ß√£o e sa√∫de
      run: |
        # Espera a API ficar saud√°vel antes de rodar os testes
        echo "‚è≥ Aguardando sa√∫de da API..."
        # O loop agora verifica o health check por 60 segundos (10 tentativas de 15s)
        for i in {1..10}; do
          # Verifica o endpoint raiz, que √© o alvo do nosso healthcheck
          if docker compose ps | grep 'setormusicalms-backend' | grep -q '(healthy)'; then
            echo "‚úÖ API saud√°vel (status healthy)!"
            break
          fi
          echo "Aguardando cont√™iner backend ficar saud√°vel..."
          sleep 15
        done

        # Verifica√ß√£o final do status
        docker compose ps
        
        echo "üöÄ Inicializando admin e testando endpoint..."
        # Executa o script de inicializa√ß√£o do admin com Python diretamente
        docker compose exec -T backend python /app/init_admin.py || echo "‚ö†Ô∏è Falha na inicializa√ß√£o do admin, continuando..."
        
        echo "üß™ Testando endpoints da API..."
        # Testa endpoint b√°sico (raiz)
        curl -f http://localhost:8000/ || (echo "‚ùå Falha no endpoint raiz" && exit 1 )
        
        echo "‚úÖ Testes conclu√≠dos!"

    - name: Encerrar containers ap√≥s testes
      if: always() # Garante que este passo rode mesmo se os testes falharem
      run: docker compose down

  build_and_push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout do c√≥digo
      uses: actions/checkout@v3
      
    - name: Login no Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build e push da imagem do backend
      uses: docker/build-push-action@v4
      with:
        context: . # CORRIGIDO: O Dockerfile do backend est√° na raiz
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/setormusicalms-backend:latest
        
    - name: Build e push da imagem do frontend
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/setormusicalms-frontend:latest

  deploy_and_validate:
    needs: build_and_push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deploy na VPS
      uses: appleboy/ssh-action@v1.0.3 # Vers√£o atualizada do action
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          echo "üöÄ Iniciando deploy na VPS..."
          
          # Navega para o diret√≥rio do projeto
          cd /root/setormusicalms || { echo "‚ùå Diret√≥rio n√£o encontrado"; exit 1; }
          
          # Atualiza o c√≥digo do reposit√≥rio
          echo "üì• Atualizando c√≥digo..."
          git pull origin main
          
          # Para os containers existentes
          echo "üõë Parando containers..."
          docker compose down || echo "‚ö†Ô∏è Nenhum container rodando"
          
          # Remove imagens antigas para for√ßar download das novas
          echo "üóëÔ∏è Removendo imagens antigas..."
          docker rmi ${{ secrets.DOCKER_USERNAME }}/setormusicalms-backend:latest || echo "‚ö†Ô∏è Imagem backend n√£o encontrada para remover"
          docker rmi ${{ secrets.DOCKER_USERNAME }}/setormusicalms-frontend:latest || echo "‚ö†Ô∏è Imagem frontend n√£o encontrada para remover"
          
          # Faz pull das novas imagens do Docker Hub
          echo "üì¶ Baixando novas imagens..."
          docker pull ${{ secrets.DOCKER_USERNAME }}/setormusicalms-backend:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/setormusicalms-frontend:latest
          
          # Inicia os novos containers em modo detached
          echo "üöÄ Iniciando novos containers..."
          docker compose up -d
          
          # Aguarda os servi√ßos ficarem prontos
          echo "‚è≥ Aguardando servi√ßos..."
          sleep 40
          
          # Executa inicializa√ß√£o do admin
          echo "üë§ Inicializando usu√°rio admin..."
          docker compose exec -T backend python /app/init_admin.py || echo "‚ö†Ô∏è Falha na inicializa√ß√£o do admin"
          
          # Verifica se os servi√ßos est√£o rodando
          echo "üîç Verificando status dos servi√ßos..."
          docker compose ps
          
          echo "‚úÖ Deploy conclu√≠do!"
          
    - name: Validar deploy
      run: |
        echo "üß™ Validando deploy em setormusicalms.art.br..."
        
        # Aguarda um pouco para os servi√ßos estabilizarem
        sleep 20
        
        # Testa se o site est√° acess√≠vel
        for i in {1..5}; do
          if curl -f -s http://setormusicalms.art.br/ >/dev/null 2>&1; then
            echo "‚úÖ Site acess√≠vel!"
            exit 0 # Sucesso, sai do script
          fi
          echo "‚è≥ Tentativa $i/5 - aguardando site ficar dispon√≠vel..."
          sleep 20
        done

        echo "‚ùå Falha ao validar o deploy. O site n√£o ficou acess√≠vel."
        exit 1
