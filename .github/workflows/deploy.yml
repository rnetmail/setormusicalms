# /.github/workflows/deploy.yml
# v2.0 - 2025-08-07 12:10:00 - Corrige execução do init_admin.py

name: Deploy to VPS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout do código
      uses: actions/checkout@v3

    - name: Iniciar serviços com Docker Compose
      run: |
        docker-compose up -d --build
        
    - name: Executar testes dentro do contêiner
      run: |
        # Espera a API ficar saudável antes de rodar os testes
        echo "⏳ Aguardando saúde da API..."
        for i in {1..30}; do
          if curl -f http://localhost:8000/api/health 2>/dev/null; then
            echo "✅ API saudável!"
            break
          fi
          echo "curl: (7) Failed to connect to localhost port 8000 after 0 ms: Couldn't connect to server"
          sleep 2
        done
        
        curl -f http://localhost:8000/api/health
        
        echo "🚀 Inicializando admin e testando endpoint..."
        # Executa o script de inicialização do admin com Python diretamente
        docker-compose exec -T backend python /app/init_admin.py || echo "⚠️ Falha na inicialização do admin, continuando..."
        
        echo "🧪 Testando endpoints da API..."
        # Testa endpoint básico
        curl -f http://localhost:8000/ || echo "❌ Falha no endpoint raiz"
        
        # Testa endpoint de saúde
        curl -f http://localhost:8000/api/health || echo "❌ Falha no health check"
        
        echo "✅ Testes concluídos!"

    - name: Encerrar containers após testes
      run: docker-compose down

  build_and_push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout do código
      uses: actions/checkout@v3
      
    - name: Login no Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build e push da imagem do backend
      uses: docker/build-push-action@v4
      with:
        context: ./fastapi_backend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/setormusicalms-backend:latest
        
    - name: Build e push da imagem do frontend
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/setormusicalms-frontend:latest

  deploy_and_validate:
    needs: build_and_push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy na VPS
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          echo "🚀 Iniciando deploy na VPS..."
          
          # Navega para o diretório do projeto
          cd /root/setormusicalms || { echo "❌ Diretório não encontrado"; exit 1; }
          
          # Atualiza o código do repositório
          echo "📥 Atualizando código..."
          git pull origin main
          
          # Para os containers existentes
          echo "🛑 Parando containers..."
          docker-compose down || echo "⚠️ Nenhum container rodando"
          
          # Remove imagens antigas para forçar download das novas
          echo "🗑️ Removendo imagens antigas..."
          docker rmi ${{ secrets.DOCKER_USERNAME }}/setormusicalms-backend:latest || echo "⚠️ Imagem backend não encontrada"
          docker rmi ${{ secrets.DOCKER_USERNAME }}/setormusicalms-frontend:latest || echo "⚠️ Imagem frontend não encontrada"
          
          # Faz pull das novas imagens
          echo "📦 Baixando novas imagens..."
          docker pull ${{ secrets.DOCKER_USERNAME }}/setormusicalms-backend:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/setormusicalms-frontend:latest
          
          # Inicia os novos containers
          echo "🚀 Iniciando novos containers..."
          docker-compose up -d
          
          # Aguarda os serviços ficarem prontos
          echo "⏳ Aguardando serviços..."
          sleep 30
          
          # Executa inicialização do admin
          echo "👤 Inicializando usuário admin..."
          docker-compose exec -T backend python /app/init_admin.py || echo "⚠️ Falha na inicialização do admin"
          
          # Verifica se os serviços estão rodando
          echo "🔍 Verificando status dos serviços..."
          docker-compose ps
          
          echo "✅ Deploy concluído!"
          
    - name: Validar deploy
      run: |
        echo "🧪 Validando deploy em setormusicalms.art.br..."
        
        # Aguarda um pouco para os serviços estabilizarem
        sleep 10
        
        # Testa se o site está acessível
        for i in {1..5}; do
          if curl -f -s http://setormusicalms.art.br/ >/dev/null 2>&1; then
            echo "✅ Site acessível!"
            break
          fi
          echo "⏳ Tentativa $i/5 - aguardando site ficar disponível..."
          sleep 10
        done
        
        # Testa endpoint da API
        if curl -f -s http://setormusicalms.art.br/api/health >/dev/null 2>&1; then
          echo "✅ API funcionando!"
        else
          echo "⚠️ API pode não estar respondendo ainda"
        fi
        
        echo "🎉 Validação concluída! Acesse: http://setormusicalms.art.br"
