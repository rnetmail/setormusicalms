# .github/workflows/deploy.yml
# Vers√£o 123  -  Final, Completa e Funcional

name: CI/CD - Testar, Construir, Implementar e Validar

on:
  push:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ghcr.io/${{ github.repository_owner }}/setormusicalms-backend
  IMAGE_NAME_FRONTEND: ghcr.io/${{ github.repository_owner }}/setormusicalms-frontend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: 1. Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: 2. Iniciar servi√ßos com Docker Compose
        run: docker compose up -d --build

      - name: 3. Executar testes dentro do cont√™iner
        run: |
          # Espera a API ficar saud√°vel antes de rodar os testes
          echo "‚è≥ Aguardando sa√∫de da API..."
          timeout=90
          # CORRE√á√ÉO: Executa o curl de DENTRO do cont√™iner para garantir a conex√£o
          until docker compose exec -T backend curl -sSf http://localhost:8000/api/health; do
            timeout=$((timeout - 5))
            if [ $timeout -le 0 ]; then
              echo "‚ùå A API n√£o ficou pronta em 90s"
              docker compose logs backend
              exit 1
            fi
            sleep 5
          done
          echo "‚úÖ API saud√°vel!"

          # Inicializa admin e testa endpoint b√°sico
          echo "üöÄ Inicializando admin e testando endpoint..."
          docker compose exec -T backend python /app/init_admin.py
          
          # Teste simples de sa√∫de da API
          if docker compose exec -T backend curl -sSf http://localhost:8000/api/health | grep -q '"status":"healthy"'; then
            echo "‚úÖ Teste b√°sico passou - API est√° respondendo corretamente!"
          else
            echo "‚ùå Teste falhou - API n√£o est√° respondendo corretamente"
            exit 1
          fi

      - name: 4. Encerrar containers ap√≥s testes
        if: always()
        run: docker compose down

  build_and_push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4
      - name: Login no GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build e Push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./fastapi_backend
          push: true
          tags: ${{ env.IMAGE_NAME_BACKEND }}:latest
      - name: Build e Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          dockerfile: Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME_FRONTEND }}:latest

  # .github/workflows/deploy.yml
# Vers√£o Final - Robusta e Automatizada

# ... (in√≠cio do arquivo, jobs 'test' e 'build_and_push' sem altera√ß√µes) ...

  deploy_and_validate:
    needs: build_and_push
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Deploy, Initialize and Validate on VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          password: ${{ secrets.VPS_SSH_PASS }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            set -e  # Encerra o script se qualquer comando falhar
            PROJECT_DIR="${{ secrets.PROJECT_PATH_ON_VPS }}"

            echo ">>> [1/8] Acessando o diret√≥rio do projeto: $PROJECT_DIR"
            cd $PROJECT_DIR
            
            echo ">>> [2/8] Verificando e corrigindo permiss√µes do diret√≥rio..."
            OWNER=$(stat -c '%U' .)
            if [ "$OWNER" != "${{ secrets.VPS_SSH_USER }}" ]; then
              echo "Propriet√°rio incorreto ('$OWNER'), corrigindo para '${{ secrets.VPS_SSH_USER }}'..."
              # Usamos sudo aqui, pois o usu√°rio atual n√£o tem permiss√£o para chown
              sudo chown -R ${{ secrets.VPS_SSH_USER }}:${{ secrets.VPS_SSH_USER }} .
              echo "Permiss√µes corrigidas."
            else
              echo "Permiss√µes j√° est√£o corretas."
            fi

            echo ">>> [3/8] Atualizando o c√≥digo-fonte..."
            git fetch origin
            git reset --hard origin/main

            echo ">>> [4/8] Autenticando no GHCR..."
            mkdir -p ~/.docker
            echo '${{ secrets.DOCKER_CONFIG_JSON }}' > ~/.docker/config.json

            echo ">>> [5/8] Subindo os novos cont√™ineres..."
            # O --build garante que as imagens sejam reconstru√≠das se os Dockerfiles mudarem
            docker compose up -d --build --force-recreate

            echo ">>> [6/8] Inicializando o banco de dados (criando admin se necess√°rio)..."
            # √â seguro rodar sempre, pois o script verifica se o admin j√° existe
            docker compose exec backend python /app/init_admin.py

            echo ">>> [7/8] Aguardando 15s para a aplica√ß√£o estabilizar..."
            sleep 15

            echo ">>> [8/8] Realizando teste de fuma√ßa: Login na API..."
            # Simula um login e verifica se um token de acesso √© retornado
            # NOTA: Ajuste o endpoint '/api/auth/login' se o seu for diferente
            if curl -s -X POST "http://127.0.0.1:8001/api/auth/login" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              -d "username=admin&password=Setor@MS25" | grep -q '"access_token"'; then
              echo "‚úÖ Teste de fuma√ßa passou: Login bem-sucedido!"
              echo "Limpando imagens antigas do Docker..."
              docker image prune -af
            else
              echo "‚ùå ERRO: Teste de fuma√ßa falhou - N√£o foi poss√≠vel fazer login."
              echo "--- LOGS DO BACKEND ---"
              docker compose logs backend --tail=50
              exit 1
            fi

            echo "üöÄ Deploy conclu√≠do e validado com sucesso!"
