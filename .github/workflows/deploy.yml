# .github/workflows/deploy.yml
# Versão 40 17/07/2025 23:00

name: CI/CD - Build, Test, and Deploy

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ghcr.io/${{ github.repository_owner }}/setormusicalms-backend
  IMAGE_NAME_FRONTEND: ghcr.io/${{ github.repository_owner }}/setormusicalms-frontend
  PROJECT_PATH_ON_VPS: /home/${{ secrets.VPS_SSH_USER }}/setormusicalms

jobs:
  test_and_build:
    runs-on: ubuntu-latest
    steps:
      - name: 1. Checkout do código
        uses: actions/checkout@v4

      - name: 2. Iniciar os serviços com Docker Compose
        run: docker-compose up -d --build

      - name: 3. Aguardar os serviços estarem prontos
        run: |
          echo "A aguardar 20 segundos para os serviços iniciarem..."
          sleep 20
          docker-compose ps

      - name: 4. Configurar Python para o executor de testes
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 5. Instalar dependências de teste
        run: |
          python -m pip install --upgrade pip
          pip install -r fastapi_backend/requirements.txt
          playwright install

      - name: 6. Rodar testes com Pytest
        run: pytest fastapi_backend/
      
      - name: 7. Parar os serviços após os testes
        if: always()
        run: docker-compose down

      - name: 8. Login no GitHub Container Registry (ghcr.io)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 9. Build e Push da imagem do Backend
        uses: docker/build-push-action@v5
        with:
          context: ./fastapi_backend
          push: true
          tags: ${{ env.IMAGE_NAME_BACKEND }}:latest

      - name: 10. Build e Push da imagem do Frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          dockerfile: Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME_FRONTEND }}:latest

  deploy:
    needs: test_and_build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy na VPS via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          password: ${{ secrets.VPS_SSH_PASS }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            echo ">> A aceder ao diretório do projeto..."
            cd ${{ env.PROJECT_PATH_ON_VPS }}

            echo ">> A fazer login no GitHub Container Registry na VPS..."
            # CORREÇÃO: Removemos as aspas e usamos o segredo GIT_PAT (Personal Access Token)
            echo ${{ secrets.GIT_PAT }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

            echo ">> A puxar as imagens mais recentes..."
            docker-compose pull

            echo ">> A reiniciar os serviços com as novas imagens..."
            docker-compose up -d

            echo ">> A garantir que a base de dados e o admin estão inicializados..."
            docker-compose exec backend python fastapi_backend/init_admin.py

            echo ">> A limpar imagens Docker antigas para economizar espaço..."
            docker image prune -af
            
            echo ">> ✅ Deploy finalizado com sucesso!"
