name: Deploy to VPS

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'Deploy to VPS')
    
    steps:
    - name: 🚀 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📦 Install frontend dependencies
      run: |
        npm cache clean --force
        rm -rf node_modules package-lock.json
        npm install
      
    - name: 🏗️ Build frontend
      run: npm run build
      
    - name: 🧪 Run frontend tests
      run: |
        echo "✅ Frontend build concluído com sucesso"
        
    - name: 🐍 Setup Python for backend tests
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📦 Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🧪 Run backend tests
      run: |
        cd backend
        python manage.py check --deploy
        echo "✅ Backend validado com sucesso"
        
    - name: 🚀 Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.USER_ADMIN }}
        password: ${{ secrets.VPS_SSH_PASS }}
        port: ${{ secrets.VPS_SSH_PORT }}
        script: |
          echo "🚀 === Iniciando Deploy do Setor Musical MS ==="
          echo "📅 Data: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "🔄 Commit: ${{ github.sha }}"
          
          # Navegar para o diretório do projeto
          cd /setormusical/setormusicalms || { echo "❌ Diretório não encontrado"; exit 1; }
          
          echo "📦 === Fazendo backup dos containers atuais ==="
          docker-compose down --remove-orphans || echo "⚠️ Containers já estavam parados"
          
          echo "🔄 === Sincronizando com repositório ==="
          git fetch origin || { echo "❌ Erro ao fazer fetch"; exit 1; }
          git reset --hard origin/main || { echo "❌ Erro ao fazer reset"; exit 1; }
          
          echo "📋 === Verificando mudanças recentes ==="
          echo "Últimos 5 commits:"
          git log --oneline -5
          
          echo "🏗️ === Construindo imagens Docker ==="
          docker-compose build --no-cache || { echo "❌ Erro no build"; exit 1; }
          
          echo "🚀 === Iniciando containers ==="
          docker-compose up -d || { echo "❌ Erro ao iniciar containers"; exit 1; }
          
          echo "⏳ === Aguardando containers iniciarem ==="
          sleep 30
          
          echo "🔍 === Verificando status dos containers ==="
          docker-compose ps
          
          echo "🏥 === Testando saúde da aplicação ==="
          
          # Testar frontend
          echo "🌐 Testando frontend..."
          if curl -f -s http://localhost:8001 > /dev/null; then
            echo "✅ Frontend respondendo na porta 8001"
          else
            echo "❌ Frontend não está respondendo"
            docker-compose logs frontend --tail=20
          fi
          
          # Testar backend
          echo "🔧 Testando backend..."
          if docker-compose exec -T backend python manage.py check > /dev/null 2>&1; then
            echo "✅ Backend Django está saudável"
          else
            echo "❌ Backend Django com problemas"
            docker-compose logs backend --tail=20
          fi
          
          # Testar banco de dados
          echo "🗄️ Testando banco de dados..."
          if docker-compose exec -T db pg_isready -U mestre > /dev/null 2>&1; then
            echo "✅ Banco de dados PostgreSQL está saudável"
          else
            echo "❌ Banco de dados com problemas"
            docker-compose logs db --tail=20
          fi
          
          echo "📊 === Verificando logs recentes ==="
          echo "--- Logs do Frontend ---"
          docker-compose logs frontend --tail=10
          echo "--- Logs do Backend ---"
          docker-compose logs backend --tail=10
          echo "--- Logs do Banco ---"
          docker-compose logs db --tail=5
          
          echo "🎉 === Deploy finalizado com sucesso ==="
          echo "🌐 Site disponível em: https://setormusicalms.art.br"
          echo "⚙️ Painel admin: https://setormusicalms.art.br/#/gestao/login"
          
    - name: 📊 Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎉 ===== DEPLOY CONCLUÍDO COM SUCESSO ====="
          echo "✅ Aplicação rodando corretamente!"
          echo "🌐 Site: https://setormusicalms.art.br"
          echo "⚙️ Painel de Gestão: https://setormusicalms.art.br/#/gestao/login"
          echo "📱 Status dos containers verificado"
          echo "🔍 Testes de saúde executados"
          echo "📅 Deploy realizado em: $(date '+%Y-%m-%d %H:%M:%S')"
        else
          echo "❌ ===== DEPLOY FALHOU ====="
          echo "🔍 Verifique os logs acima para identificar o problema"
          echo "📋 Possíveis causas:"
          echo "   - Erro de build do Docker"
          echo "   - Problemas de conectividade SSH"
          echo "   - Falha nos testes de saúde"
          echo "   - Configuração incorreta do ambiente"
          exit 1
        fi
        
    - name: 📝 Create deployment summary
      if: success()
      run: |
        echo "## 🚀 Deploy Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Item | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Build | ✅ Success |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Validation | ✅ Success |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Build | ✅ Success |" >> $GITHUB_STEP_SUMMARY
        echo "| Container Health | ✅ Success |" >> $GITHUB_STEP_SUMMARY
        echo "| Site URL | [setormusicalms.art.br](https://setormusicalms.art.br) |" >> $GITHUB_STEP_SUMMARY
        echo "| Admin Panel | [Painel de Gestão](https://setormusicalms.art.br/#/gestao/login) |" >> $GITHUB_STEP_SUMMARY
        echo "| Deploy Time | $(date '+%Y-%m-%d %H:%M:%S') |" >> $GITHUB_STEP_SUMMARY

