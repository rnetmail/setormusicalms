# .github/workflows/deploy.yml
# Vers√£o 58 19/07/2025 18:50

name: CI/CD - Testar, Construir, Implementar e Validar

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: docker compose up -d --build
      - name: Aguardar, Verificar Sa√∫de e Inicializar DB
        run: |
          echo "A aguardar que a API esteja pronta..."
          timeout=60
          while ! curl -sSf http://localhost:8000/api/health; do
            timeout=$((timeout - 5))
            if [ $timeout -le 0 ]; then
              echo "A API n√£o ficou pronta em 60 segundos."
              docker compose logs backend
              exit 1
            fi
            sleep 5
          done
          echo "‚úÖ API est√° pronta e a responder!"
          # CORRE√á√ÉO: Usa o nome do servi√ßo 'backend' como definido no docker-compose.yml
          docker compose exec backend python /app/init_admin.py
      - name: Instalar depend√™ncias e Executar Testes
        run: |
          pip install -r fastapi_backend/requirements.txt
          playwright install
          pytest fastapi_backend/
      - name: Parar os servi√ßos ap√≥s os testes
        if: always()
        run: docker compose down

  build_and_push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Login no GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build e Push da imagem do Backend
        uses: docker/build-push-action@v5
        with:
          context: ./fastapi_backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/setormusicalms-backend:latest
      - name: Build e Push da imagem do Frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          dockerfile: Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/setormusicalms-frontend:latest

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Deploy na VPS via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          password: ${{ secrets.VPS_SSH_PASS }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            set -e
            PROJECT_DIR="/home/${{ secrets.VPS_SSH_USER }}/setormusical/setormusicalms"
            cd $PROJECT_DIR
            echo ${{ secrets.GIT_PAT }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            docker compose pull
            docker compose up -d
            sleep 15
            # CORRE√á√ÉO: Usa o nome do servi√ßo 'backend' como definido no docker-compose.yml
            docker compose exec backend python /app/init_admin.py
            docker image prune -af
            echo "‚úÖ Deploy finalizado com sucesso!"

  validate:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: 1. Aguardar a inicializa√ß√£o dos servi√ßos na VPS
        run: |
          echo "A aguardar 30 segundos para os servi√ßos estabilizarem..."
          sleep 30
      - name: 2. Validar o endpoint do Frontend
        run: |
          echo "A verificar o URL do Frontend: https://setormusicalms.art.br/"
          curl -sSf https://setormusicalms.art.br/ | grep -q "<title>Setor Musical Mokiti Okada MS</title>"
          echo "‚úÖ O Frontend est√° online e a servir o conte√∫do correto."
      - name: 3. Validar o endpoint do Backend (Health Check)
        run: |
          echo "A verificar o URL do Backend: https://setormusicalms.art.br/api/health"
          curl -sSf https://setormusicalms.art.br/api/health | grep -q '{"status":"healthy","message":"API est√° no ar e funcionando."}'
          echo "‚úÖ O Backend est√° online e a responder corretamente."
      - name: üöÄ Valida√ß√£o Finalizada
        run: echo "A aplica√ß√£o foi implantada e validada com sucesso!"
