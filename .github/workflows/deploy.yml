# .github/workflows/deploy.yml
# Vers√£o 93 - Corrigido e Melhorado em 22/07/2025

name: CI/CD - Testar, Construir, Implementar e Validar

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ghcr.io/${{ github.repository_owner }}/setormusicalms-backend
  IMAGE_NAME_FRONTEND: ghcr.io/${{ github.repository_owner }}/setormusicalms-frontend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: 1. Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: 2. Iniciar servi√ßos com Docker Compose
        run: docker compose up -d --build

      - name: 3. Aguardar e Verificar a Sa√∫de da API
        run: |
          echo "‚è≥ Aguardando sa√∫de da API..."
          timeout=90
          until curl -sSf http://localhost:8000/api/health; do
            timeout=$((timeout - 5))
            if [ $timeout -le 0 ]; then
              echo "‚ùå A API n√£o ficou pronta em 90s"
              docker compose logs backend
              exit 1
            fi
            sleep 5
          done
          echo "‚úÖ API saud√°vel!"
          docker compose exec backend python /app/init_admin.py

      - name: 4. Instalar depend√™ncias e Executar Testes
        run: |
          pip install -r fastapi_backend/requirements.txt
          playwright install
          pytest fastapi_backend/

      - name: 5. Parar os servi√ßos ap√≥s os testes
        if: always()
        run: docker compose down

  build_and_push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      backend_digest: ${{ steps.push_backend.outputs.digest }}
      frontend_digest: ${{ steps.push_frontend.outputs.digest }}

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Login no GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build e Push da imagem do Backend
        id: push_backend
        uses: docker/build-push-action@v5
        with:
          context: ./fastapi_backend
          push: true
          tags: ${{ env.IMAGE_NAME_BACKEND }}:latest
          outputs: type=image,name=${{ env.IMAGE_NAME_BACKEND }},annotation-index=true

      - name: Build e Push da imagem do Frontend
        id: push_frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          dockerfile: Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME_FRONTEND }}:latest
          outputs: type=image,name=${{ env.IMAGE_NAME_FRONTEND }},annotation-index=true

      - name: Verificar imagens no GHCR
        run: |
          docker pull ${{ env.IMAGE_NAME_BACKEND }}:latest
          docker pull ${{ env.IMAGE_NAME_FRONTEND }}:latest

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Deploy na VPS via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            set -e

            PROJECT_DIR="${{ secrets.PROJECT_PATH_ON_VPS }}"
            BACKEND_IMAGE="${{ env.IMAGE_NAME_BACKEND }}"
            FRONTEND_IMAGE="${{ env.IMAGE_NAME_FRONTEND }}"
            BACKEND_DIGEST="${{ needs.build_and_push.outputs.backend_digest }}"
            FRONTEND_DIGEST="${{ needs.build_and_push.outputs.frontend_digest }}"

            echo "[`date`] ‚úÖ Acessando o diret√≥rio do projeto"
            cd $PROJECT_DIR

            echo "[`date`] üîê Configurando autentica√ß√£o do Docker"
            mkdir -p ~/.docker
            echo '${{ secrets.DOCKER_CONFIG_JSON }}' > ~/.docker/config.json

            echo "[`date`] üõë Parando containers antigos"
            docker compose down --remove-orphans

            echo "[`date`] ‚¨áÔ∏è Baixando imagens do GHCR com digest"
            docker pull $BACKEND_IMAGE@$BACKEND_DIGEST
            docker tag $BACKEND_IMAGE@$BACKEND_DIGEST $BACKEND_IMAGE:latest

            docker pull $FRONTEND_IMAGE@$FRONTEND_DIGEST
            docker tag $FRONTEND_IMAGE@$FRONTEND_DIGEST $FRONTEND_IMAGE:latest

            echo "[`date`] üîç Verificando hash das imagens"
            LOCAL_BACKEND_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $BACKEND_IMAGE:latest)
            LOCAL_FRONTEND_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $FRONTEND_IMAGE:latest)

            if [[ "$LOCAL_BACKEND_DIGEST" != "$BACKEND_IMAGE@$BACKEND_DIGEST" ]]; then
              echo "‚ùå Hash do backend n√£o confere!"
              exit 1
            fi

            if [[ "$LOCAL_FRONTEND_DIGEST" != "$FRONTEND_IMAGE@$FRONTEND_DIGEST" ]]; then
              echo "‚ùå Hash do frontend n√£o confere!"
              exit 1
            fi

            echo "[`date`] üöÄ Subindo os containers"
            docker compose up -d

            echo "[`date`] ü©∫ Aguardando backend (health check)"
            timeout=90
            until curl -sSf http://localhost:8000/api/health; do
              timeout=$((timeout - 5))
              if [ $timeout -le 0 ]; then
                echo "‚ùå Backend falhou no health check!"
                docker compose logs backend
                exit 1
              fi
              sleep 5
            done

            echo "[`date`] üß† Inicializando dados..."
            docker compose exec backend python /app/init_admin.py

            echo "[`date`] üßπ Limpando imagens e volumes obsoletos"
            docker system prune -af --volumes

            echo "[`date`] ‚úÖ Deploy conclu√≠do com sucesso"

  validate:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: 1. Aguardar servi√ßos na VPS
        run: sleep 30

      - name: 2. Validar o frontend
        run: |
          curl -sSf --retry 5 --retry-delay 5 http://setormusicalms.art.br/ | grep -q "<title>Setor Musical Mokiti Okada MS</title>"
          echo "‚úÖ Frontend online"

      - name: 3. Validar o backend (health)
        run: |
          curl -sSf --retry 5 --retry-delay 5 http://setormusicalms.art.br/api/health | grep -q '{"status":"healthy","message":"API est√° no ar e funcionando."}'
          echo "‚úÖ Backend online"

      - name: 4. Teste extra de endpoint autenticado (opcional)
        run: |
          echo "‚ÑπÔ∏è Validando endpoint extra opcional..."
          curl -sSf http://setormusicalms.art.br/api/users/current || echo "‚ö†Ô∏è Endpoint protegido, token necess√°rio"
